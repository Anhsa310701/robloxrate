
import { ArrowLeft, Check, Database, Star } from "lucide-react";
import { Link, useParams, useNavigate } from "react-router-dom";
import { useState, useEffect } from "react";
import { toast } from "@/hooks/use-toast";

interface GameItem {
  id: string;
  name: string;
  value: string;
  category: string;
  icon?: string;
  numericValue?: number;
}

interface Game {
  id: string;
  name: string;
  description: string;
  items: GameItem[];
}

const GameDetail = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [selectedItems, setSelectedItems] = useState<string[]>([]);
  const [game, setGame] = useState<Game | null>(null);
  const [loading, setLoading] = useState(true);
  
  console.log("GameDetail - Game ID:", id);
  
  useEffect(() => {
    const fetchGameData = async () => {
      if (!id) return;
      
      setLoading(true);
    // TODO: Fetch data here
        
        console.log("Game data fetched:", gameData);
        
        // Fetch game items
          
        if (itemsError) {
          console.error("Error fetching items:", itemsError);
          throw itemsError;
        }
        
        console.log("Game items fetched:", itemsData);
        
        // Transform items to match the expected format
        const transformedItems: GameItem[] = itemsData.map(item => ({
          id: item.id,
          name: item.name,
          value: item.rarity === "Legendary" || item.rarity === "Godly" ? "High" :
                 item.rarity === "Epic" || item.rarity === "Rare" ? "Medium" : "Low",
          category: item.category,
          icon: getIconForCategory(item.category),
          numericValue: item.price
        }));
        
        setGame({
          id: gameData.id,
          name: gameData.name,
          description: "Game m√¥ ph·ªèng cu·ªôc s·ªëng v·ªõi nhi·ªÅu v·∫≠t ph·∫©m ƒë·ªôc ƒë√°o v√† th√∫ c∆∞ng. Ng∆∞·ªùi ch∆°i c√≥ th·ªÉ t√πy ch·ªânh nh√¢n v·∫≠t, x√¢y d·ª±ng v√† trang tr√≠ nh√†, v√† t∆∞∆°ng t√°c v·ªõi ng∆∞·ªùi ch∆°i kh√°c.",
          items: transformedItems
        });
        
        console.log("Final game state:", {
          name: gameData.name,
          itemsCount: transformedItems.length
        });
        
      } catch (error) {
        console.error("Error fetching game data:", error);
        toast({
          title: "L·ªói",
          description: "Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu game. Vui l√≤ng th·ª≠ l·∫°i sau.",
          variant: "destructive",
        });
      } finally {
        setLoading(false);
      }
    };
    
    fetchGameData();
  }, [id]);
  
  const getIconForCategory = (category: string) => {
    if (category === "Pet" || category === "Th√∫ c∆∞ng") return "üê±";
    if (category === "Vehicle" || category === "Ph∆∞∆°ng ti·ªán") return "üöó";
    if (category === "Property" || category === "B·∫•t ƒë·ªông s·∫£n") return "üè†";
    if (category === "Weapon" || category === "V≈© kh√≠") return "‚öîÔ∏è";
    if (category === "Accessory" || category === "Ph·ª• ki·ªán") return "üëë";
    if (category === "Pass" || category === "Game Pass") return "üé´";
    return "üéÆ";
  };
  
  const toggleItem = (itemId: string) => {
    setSelectedItems(prev => 
      prev.includes(itemId)
        ? prev.filter(id => id !== itemId)
        : [...prev, itemId]
    );
  };
  
  const handleContinue = () => {
    if (selectedItems.length === 0) {
      toast({
        title: "Ch∆∞a ch·ªçn v·∫≠t ph·∫©m",
        description: "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt v·∫≠t ph·∫©m ƒë·ªÉ ti·∫øp t·ª•c",
        variant: "destructive",
      });
      return;
    }
    
    console.log("Navigating to value result with:", {
      gameId: id,
      selectedItems: selectedItems
    });
    
    // Navigate to value result page with proper URL encoding
    const itemsParam = selectedItems.join(',');
    navigate(`/value?gameId=${encodeURIComponent(id || '')}&items=${encodeURIComponent(itemsParam)}`);
  };
  
  if (loading) {
    return (
      <div className="py-12 animate-fade-in">
        <div className="container mx-auto px-4">
          <div className="flex justify-center py-12">
            <div className="w-8 h-8 border-4 border-t-blue-500 border-gray-700 rounded-full animate-spin"></div>
          </div>
        </div>
      </div>
    );
  }
  
  if (!game) {
    return (
      <div className="py-12 animate-fade-in">
        <div className="container mx-auto px-4">
          <div className="text-center py-12">
            <p className="text-gray-400">Kh√¥ng t√¨m th·∫•y game n√†y.</p>
            <Link 
              to="/games" 
              className="inline-flex items-center gap-2 text-blue-400 hover:text-blue-500 mt-4"
            >
              <ArrowLeft size={18} /> Quay l·∫°i danh s√°ch game
            </Link>
          </div>
        </div>
      </div>
    );
  }
  
  return (
    <div className="py-12 animate-fade-in">
      <div className="container mx-auto px-4">
        {/* Back button */}
        <Link 
          to="/games" 
          className="inline-flex items-center gap-2 text-blue-400 hover:text-blue-500 mb-6"
        >
          <ArrowLeft size={18} /> Quay l·∫°i danh s√°ch game
        </Link>
        
        {/* Game Header */}
        <div className="glass-card p-8 mb-8">
          <div className="flex flex-col md:flex-row gap-6 items-center">
            <div className="w-24 h-24 bg-blue-900/30 rounded-full flex items-center justify-center">
              <Star size={40} className="text-blue-400" />
            </div>
            <div className="flex-1 text-center md:text-left">
              <h1 className="text-3xl font-bold mb-2">{game.name}</h1>
              <p className="text-gray-300">{game.description}</p>
            </div>
          </div>
        </div>
        
        {/* Item Selection */}
        <div className="glass-card p-8 mb-8">
          <div className="flex items-center mb-6">
            <Database className="mr-2 text-blue-400" size={20} />
            <h2 className="text-2xl font-bold">Ch·ªçn c√°c v·∫≠t ph·∫©m b·∫°n s·ªü h·ªØu</h2>
          </div>
          
          {game.items.length > 0 ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {game.items.map(item => (
                <div 
                  key={item.id}
                  className={`p-4 rounded-lg cursor-pointer transition-all ${
                    selectedItems.includes(item.id)
                      ? "bg-blue-600/20 border border-blue-500"
                      : "bg-game-card border border-gray-700 hover:border-blue-500/50"
                  }`}
                  onClick={() => toggleItem(item.id)}
                >
                  <div className="flex items-center gap-3">
                    <div className={`w-6 h-6 rounded-full flex items-center justify-center ${
                      selectedItems.includes(item.id)
                        ? "bg-blue-600"
                        : "bg-gray-700"
                    }`}>
                      {selectedItems.includes(item.id) && <Check size={14} />}
                    </div>
                    <div className="flex-1">
                      <p className="font-medium flex items-center gap-2">
                        {item.icon && <span>{item.icon}</span>}
                        {item.name}
                      </p>
                      <p className="text-sm text-gray-400">Gi√° tr·ªã: {item.value}</p>
                      {item.numericValue && (
                        <p className="text-xs text-cyan-400">
                          {new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' })
                            .format(item.numericValue).replace(/\s/g, '')}
                        </p>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center py-8 text-gray-400">
              Ch∆∞a c√≥ v·∫≠t ph·∫©m n√†o cho game n√†y.
            </div>
          )}
        </div>
        
        {/* Submit Button */}
        <div className="text-center">
          <button
            onClick={handleContinue}
            className="inline-flex items-center gap-2 px-8 py-3 bg-blue-600 hover:bg-blue-700 rounded-lg text-white font-medium transition-colors text-lg disabled:opacity-50 disabled:cursor-not-allowed"
            disabled={selectedItems.length === 0}
          >
            Ti·∫øp t·ª•c {selectedItems.length > 0 && `(${selectedItems.length} v·∫≠t ph·∫©m)`}
          </button>
        </div>
      </div>
    </div>
  );
};

export default GameDetail;
